<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--此文件负责整个mvc中的配置-->

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <mvc:annotation-driven />
    <!-- 使用注解的包，包括子集 -->
    <context:component-scan base-package="com.zy" />



    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/statics/js/"/>
    <mvc:resources mapping="/image/**" location="/statics/images/"/>
    <mvc:default-servlet-handler />  <!--这句要加上，要不然可能会访问不到静态资源，具体作用自行百度-->

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>



    <!-- 文件上传配置注意:这里申明的id必须为multipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="500000"/>
    </bean>


    <!-- 加载配置文件 -->
    <!--<context:property-placeholder location="classpath:config/jdbc.properties" />-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config/jdbc.properties"/>
    </bean>


    <!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="100"/>
        <property name="maxIdle" value="5"/>
        <property name="maxWait" value="80000"/>
    </bean>



    <!-- 配置会话工厂SqlSessionFactory -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:sqlmap/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="com.zy.pojo" />

    </bean>

    <!-- 在spring容器中配置mapper的扫描器产生的动态代理对象在spring的容器中自动注册，bean的id就是mapper类名（首字母小写）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描包的路径，就是mapper接口的路径，多个包中间以 半角逗号隔开   -->
        <property name="basePackage" value="com.zy.dao"/>
        <!-- 配置sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置事务通知属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="new*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="change*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务切面 -->
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.zy.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>



    <!-- 系统错误转发配置[并记录错误日志]   -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="500"></property>   <!-- 默认为500，系统错误(error.jsp)  -->
        <property name="defaultStatusCode" value="404"></property>
        <property name="statusCodes"><!-- 配置多个statusCode -->
            <props>
                <prop key="error">500</prop>  <!-- error.jsp -->
                <prop key="error1">404</prop>    <!-- error1.jsp -->
            </props>
        </property>
        <property name="exceptionMappings">
            <props>
                <!-- 这里你可以根据需要定义N多个错误异常转发 -->
                <prop key="java.sql.SQLException">dbError</prop> <!-- 数据库错误(dbError.jsp) -->
                <prop key="org.springframework.web.bind.ServletRequestBindingException">bizError</prop> <!-- 参数绑定错误(如：必须参数没传递)(bizError.jsp) -->
                <prop key="java.lang.IllegalArgumentException">bizError</prop>  <!-- 参数错误(bizError.jsp) -->
                <prop key="org.springframework.validation.BindException">bizError</prop>  <!-- 参数类型有误(bizError.jsp) -->
                <prop key="java.lang.Exception">unknowError</prop>  <!-- 其他错误为'未定义错误'(unknowError.jsp)  -->
            </props>
        </property>
    </bean>


    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>



    <!--&lt;!&ndash; freemarker配置资源文件引入&ndash;&gt;-->
    <!--<bean id="freemarkerConfiguration"-->
          <!--class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
        <!--<property name="location" value="classpath:config/freemarker.properties" />-->
    <!--</bean>-->

    <!-- 配置freeMarker的模板路径 -->
    <!--<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">-->
        <!--<property name="templateLoaderPath">-->
            <!--<value>/WEB-INF/views/</value>-->
        <!--</property>-->
        <!--<property name="freemarkerVariables">-->
            <!--<map>-->
                <!--<entry key="xml_escape" value-ref="fmXmlEscape"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="freemarkerSettings" ref="freemarkerConfiguration"></property>-->
    <!--</bean>-->

    <!--<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>-->

    <!--&lt;!&ndash; 针对freemarker的视图解析器配置 &ndash;&gt;-->
    <!--<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">-->
        <!--<property name="cache" value="true" />-->
        <!--<property name="prefix" value="" />-->
        <!--<property name="suffix" value=".ftl" />-->
        <!--<property name="viewClass">-->
            <!--<value>org.springframework.web.servlet.view.freemarker.FreeMarkerView-->
            <!--</value>-->
        <!--</property>-->
        <!--<property name="contentType" value="text/html;charset=UTF-8"></property>-->
        <!--&lt;!&ndash; 在ftl页面中使用request.contextPath就可以获得contextPath&ndash;&gt;-->
        <!--<property name="requestContextAttribute" value="request" />-->
        <!--&lt;!&ndash; 使用这些宏，必须设置FreeMarkerViewResolver的exposeMacroHelpers属性为true &ndash;&gt;-->
        <!--<property name="exposeSpringMacroHelpers" value="true" />-->
        <!--&lt;!&ndash; 将请求和会话属性作为变量暴露给freemaker模板使用&ndash;&gt;-->
        <!--<property name="exposeRequestAttributes" value="true" />-->
        <!--<property name="exposeSessionAttributes" value="true" />-->
    <!--</bean>-->


</beans>
